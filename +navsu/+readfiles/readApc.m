function pvt = readApc(filename)% TrueEphem = readNGA( filename )% TrueEphem is a n x 12 matrix. Each row of TrueEphem includes% [ GPS week, GPS sec, PRN, x, y, z, Clock drift, dx, dy, dz, d(Clock drift), Event Flag ]% No mathematical processing --- the value of each element is identical to that in the NGA file% Written by: Liang Heng  05/28/2009% functions called: err_chk, utc2leappvt = [];% if (nargin <= 1)%     outputFormat = [];% end[fid, message] = fopen(filename, 'rt');if (fid == -1)    fprintf(2, 'Error open %s: %s\n', filename, message);	returnendNumSV = -1;while 1    tline = fgetl(fid);    if ~ischar(tline)        break    end    switch tline(1:2)        case '#a'            DateTime = sscanf(tline(4:end), '%f' ,6);            NumEpochs = str2double(tline(33:39));        case '##'            GPS_week_num = str2double(tline(4:7));            GPS_seconds = str2double(tline(9:23));            Epoch_interval = str2double(tline(25:38));        case '+ '            if NumSV < 0                NumSV = str2double(tline(2:8));                if NumSV < 1                    fprintf(2, 'Error: The number of SVs is zero.\n');                    fclose(fid);                    return                else                    dataFormat = 'P%n%n%n%n%n%1s%*[^\n]\nV%n%n%n%n%n%*[^\n]\n';                end            end        case '* '            break    endendC = textscan(fid, dataFormat, NumSV * NumEpochs, 'CollectOutput', 1, 'CommentStyle', '*');fclose(fid);array = [C{1} C{3}];len = size(array, 1);if len ~= NumSV * NumEpochs    fprintf(2, 'Error: Incorrect size of precise PVT array: %d\n', len);    returnend% epochs = kron(ones(1,NumSV),...%     navsu.time.gps2epochs(GPS_week_num,GPS_seconds)+(0:(NumEpochs-1))*Epoch_interval)';epochs = reshape(repmat(navsu.time.gps2epochs(GPS_week_num,GPS_seconds)+(0:(NumEpochs-1))'*Epoch_interval,...    1,NumSV)',NumSV*NumEpochs,1);pvt = struct('filename', filename, ...    'DateTime', DateTime', ...    'GPS_week_num', GPS_week_num, ...    'GPS_seconds', GPS_seconds, ...    'Epoch_interval', Epoch_interval, ...    'NumSV', NumSV, ...    'NumEpochs', NumEpochs, ...    'PRN', array(:, 1), ...    'clock_bias', array(:, 5) .* 1e-6, ...    'clock_drift', array(:, 10) .* 1e-10, ...    'position', array(:, 2:4) .* 1000, ...    'velocity', array(:, 7:9) .* 0.1, ...    'Event', ~cellfun(@isempty, C{2}),...    'epochs',epochs);pvt.Event(abs(pvt.clock_bias) >= 0.999999) = true;pvt.Event(any(pvt.position == 0, 2)) = true;pvt = ExpandPeph(pvt);endfunction Outeph = ExpandPeph(Peph)Outeph = Peph;if Peph.NumSV < 32    prns = Peph.PRN(1:Peph.NumSV);        Outeph.PRN = repmat((1:32)', 1, Peph.NumEpochs);    Outeph.PRN = reshape(Outeph.PRN, 32*Peph.NumEpochs,1);        Outeph.clock_bias = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.clock_bias, Peph.NumSV, Peph.NumEpochs);    Outeph.clock_bias(prns, :) = tmp;    Outeph.clock_bias = reshape(Outeph.clock_bias, 32*Peph.NumEpochs,1);    Outeph.clock_drift = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.clock_drift, Peph.NumSV, Peph.NumEpochs);    Outeph.clock_drift(prns, :) = tmp;    Outeph.clock_drift = reshape(Outeph.clock_drift, 32*Peph.NumEpochs,1);            tmppos = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.position(:,1), Peph.NumSV, Peph.NumEpochs);    tmppos(prns, :) = tmp;    Outeph.position = reshape(tmppos, 32*Peph.NumEpochs,1);            tmppos = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.position(:,2), Peph.NumSV, Peph.NumEpochs);    tmppos(prns, :) = tmp;    Outeph.position(:,2) = reshape(tmppos, 32*Peph.NumEpochs,1);        tmppos = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.position(:,3), Peph.NumSV, Peph.NumEpochs);    tmppos(prns, :) = tmp;    Outeph.position(:,3) = reshape(tmppos, 32*Peph.NumEpochs,1);             tmppos = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.velocity(:,1), Peph.NumSV, Peph.NumEpochs);    tmppos(prns, :) = tmp;    Outeph.velocity = reshape(tmppos, 32*Peph.NumEpochs,1);            tmppos = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.velocity(:,2), Peph.NumSV, Peph.NumEpochs);    tmppos(prns, :) = tmp;    Outeph.velocity(:,2) = reshape(tmppos, 32*Peph.NumEpochs,1);        tmppos = NaN(32, Peph.NumEpochs);    tmp = reshape(Peph.velocity(:,3), Peph.NumSV, Peph.NumEpochs);    tmppos(prns, :) = tmp;    Outeph.velocity(:,3) = reshape(tmppos, 32*Peph.NumEpochs,1);             Outeph.Event = ones(32, Peph.NumEpochs);    tmp = reshape(Peph.Event, Peph.NumSV, Peph.NumEpochs);    Outeph.Event(prns, :) = tmp;    Outeph.Event = reshape(Outeph.Event, 32*Peph.NumEpochs,1);             Outeph.epochs = ones(32, Peph.NumEpochs);    tmp = reshape(Peph.epochs, Peph.NumSV, Peph.NumEpochs);    Outeph.epochs(prns, :) = tmp;    Outeph.epochs = reshape(Outeph.epochs, 32*Peph.NumEpochs,1);             Outeph.NumSV = 32;endend